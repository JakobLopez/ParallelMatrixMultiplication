"""
Nodebechukwu Okoye and Jakob Lopez
Submit: sbatch OkoyeLopezProjectStrassensParallelScript
"""
from mpi4py import MPI
import numpy as np
import time

def transverse_split(matrix):
	return np.vsplit(matrix, 2)

def sagital_split(matrix):
	return np.hsplit(matrix,2)

def top_left(matrix):
	return sagital_split(transverse_split(matrix)[0])[0]
def top_right(matrix):
	return sagital_split(transverse_split(matrix)[0])[1]
def bottom_left(matrix):
	return sagital_split(transverse_split(matrix)[1])[0]
def bottom_right(matrix):
	return sagital_split(transverse_split(matrix)[1])[1]

def split(matrix):
	"""
	Splits a matrix into 4 sub matrices

	Parameters:
			matrix - nxn matrix 

	Returns:
			tuple of individual sub matrices
	"""
	upper_half = np.hsplit(np.vsplit(matrix, 2)[0], 2)
	lower_half = np.hsplit(np.vsplit(matrix, 2)[1], 2)

	upper_left = upper_half[0]
	upper_right = upper_half[1]
	lower_left = lower_half[0]
	lower_right = lower_half[1]
	return upper_left, upper_right, lower_left, lower_right

def strassens(m1, m2):
	"""
	Performs strassens matrix multiplication algorithm

	Parameters:
	m1 - first nxn matrix where n is power of 2
	m2 - seconds nxn matrix where n is power of 2

	Returns:
	Result of matrix multiplication
	"""
	
	if m1.shape[0] == 256:
		return np.matmul(m1, m2)

	A, B, C, D = split(m1)
	E, F, G, H = split(m2)

	# Strassens algorithm equations
	p1 = strassens(A, F - H)
	p2 = strassens(A + B, H)
	p3 = strassens(C + D, E)
	p4 = strassens(D, G - E)
	p5 = strassens(A + D, E + H)
	p6 = strassens(B - D, G + H)
	p7 = strassens(A - C, E + F)

	AE_BG = p5 + p4 - p2 + p6
	AF_BH = p1 + p2
	CE_DG = p3 + p4
	CF_DH = p5 + p1 - p3 - p7

	# Combine 4 sub matrices into 1 before returning
	return np.vstack([np.hstack([AE_BG, AF_BH]), np.hstack([CE_DG, CF_DH])])

comm = MPI.COMM_WORLD
rank = comm.Get_rank()

# Size of matrix
n = 1024

# Initialize empty matrices
m1 = np.empty(shape=(n,n), dtype="i")
m2 = np.empty(shape=(n,n), dtype="i")

if rank is 0:
	# Initialize nxn matrix with random numbers 1 - 5
	m1[:] = np.random.randint(1, 5, size=(n, n)) 
	m2[:] = np.random.randint(1, 5, size=(n, n))

# Distribute matrices to all processes
comm.Bcast(m1, root=0)
comm.Bcast(m2, root=0)

p = np.empty(shape=(n//2,n//2), dtype="i")

if rank is 0:
	start = time.time()
	A = top_left(m1)
	F = top_right(m2)
	H = bottom_right(m2)
	p = strassens(A, F - H)
elif rank is 1:
	A = top_left(m1)
	B = top_right(m1)
	H = bottom_right(m2)
	p = strassens(A + B, H)
elif rank is 2:
	C = bottom_left(m1)
	D = bottom_right(m1)
	E = top_left(m2)
	p = strassens(C + D, E)
elif rank is 3:
	D = bottom_right(m1)
	G = bottom_left(m2)
	E = top_left(m2)
	p = strassens(D, G - E)
elif rank is 4:
	A = top_left(m1)
	D = bottom_right(m1)
	E = top_left(m2)
	H = bottom_right(m2)
	p = strassens(A + D, E + H)
elif rank is 5:
	B = top_right(m1)
	D = bottom_right(m1)
	G = bottom_left(m2)
	H = bottom_right(m2)
	p = strassens(B - D, G + H)
elif rank is 6:
	A = top_left(m1)
	C = bottom_left(m1)
	E = top_left(m2)
	F = top_right(m2)
	p = strassens(A - C, E + F)

data = np.empty(shape=(7, n//2,n//2), dtype="i")
comm.Gatherv([p, p.size, MPI.INT], [data, p.size,  MPI.INT], root=0)

if rank is 0:
	AE_BG = data[4] + data[3] - data[1] + data[5]
	AF_BH = data[0] + data[1]
	CE_DG = data[2] + data[3]
	CF_DH = data[3] + data[0] - data[2] - data[6]
	end = time.time()
	answer = np.vstack([np.hstack([AE_BG, AF_BH]), np.hstack([CE_DG, CF_DH])])
	
	print("Finished in {}seconds".format(end - start))
